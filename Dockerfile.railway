# Multi-stage Dockerfile for Railway deployment
# This will build all services but Railway will run them as one

# Build frontend
FROM node:18-alpine as frontend-builder
WORKDIR /app/frontend
COPY archon-ui-main/package*.json ./
RUN npm ci
COPY archon-ui-main/ ./
RUN npm run build

# Build backend
FROM python:3.11-slim as backend
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy Python requirements and install
COPY python/requirements.server.txt ./
RUN pip install --no-cache-dir -r requirements.server.txt

# Copy backend code
COPY python/ ./python/
COPY migration/ ./migration/

# Copy frontend build
COPY --from=frontend-builder /app/frontend/dist ./static

# Set environment variables - Railway will override these
ENV PYTHONPATH=/app/python
ENV SERVER_PORT=8181
ENV PORT=8181

# Create a startup script to debug environment variables
RUN echo '#!/bin/bash\n\
echo "=== Environment Variables Debug ==="\n\
echo "SUPABASE_URL: $SUPABASE_URL"\n\
echo "SERVER_PORT: $SERVER_PORT"\n\
echo "PORT: $PORT"\n\
echo "NODE_ENV: $NODE_ENV"\n\
echo "================================="\n\
python -m uvicorn src.server.main:app --host 0.0.0.0 --port ${PORT:-8181}' > /app/start.sh && \
    chmod +x /app/start.sh

# Expose port
EXPOSE 8181

# Start the backend server with environment variable debugging
CMD ["/bin/bash", "/app/start.sh"]